version: '3.7'

services:
  # producer:
  #   image: dreamstack/producer
  #   container_name: dreamstack_producer
  #   build:
  #     context: ./services/eosio
  #     dockerfile: Dockerfile
  #   network_mode: host
  #   environment:
  #     DATA_DIR: /root/data-dir
  #     CONFIG_DIR: /opt/application/config
  #   volumes:
  #     - dreamstack_eosio:/root/data-dir
  #     - ./services/eosio:/opt/application

  postgres:
    container_name: dreamstack_postgres
    image: postgres:12
    volumes:
      - dreamstack_postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: dreamstack
      POSTGRES_PASSWORD: pass
      DB_NAME: dreamstack
      DB_USER: dreamstack
      DB_PASSWORD: pass
      POSTGRES_DB: dreamstack

  hasura:
    container_name: dreamstack_hasura
    image: hasura/graphql-engine:v1.0.0.cli-migrations
    ports:
      - '8085:8080'
      - '443:443'
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://dreamstack:pass@postgres:5432/dreamstack?sslmode=disable
      HASURA_GRAPHQL_MIGRATIONS_DIR: /migrations
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to "false" to disable console
      HASURA_GRAPHQL_ACCESS_KEY: mysecretaccesskey
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HOST: hasura.local.telosdreamstack.io
      VIRTUAL_HOST: hasura.local.telosdreamstack.io
      VIRTUAL_PORT: 8080
    volumes:
      - ./services/hasura/migrations:/migrations  #  mount hasura migrations folder
    depends_on:
      - postgres
    command:
      - graphql-engine
      - serve

  graphiql:
    container_name: dreamstack_graphiql
    image: telosdreamstack/graphiql
    ports:
      - '8084:8080'
    environment:
      GRAPHQL_ENDPOINT: http://hasura.local.telosdreamstack.io/v1/graphql
      VIRTUAL_HOST: graph.local.telosdreamstack.io
      VIRTUAL_PORT: 8080
      WAIT_HOSTS: hasura:8080
      WAIT_HOSTS_TIMEOUT: 60
    depends_on:
      - hasura

  pgweb:
    container_name: dreamstack_pgweb
    image: sosedoff/pgweb:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: postgres://dreamstack:pass@postgres:5432/dreamstack?sslmode=disable
      VIRTUAL_HOST: pgweb.local.telosdreamstack.io
      VIRTUAL_PORT: 8081

  chronicle:
    image: eostribe/chronicle
    container_name: dreamstack_chronicle
    volumes:
      - ./services/chronicle:/opt/data
    environment:
      - DATA_DIR=./data
      - MODE=scan
      - HOST=mainnet.telosusa.io #ip address or hostname of nodeos with state-history plogin
      - PORT=8890 #port number of state history plugin
      - WS_HOST=rxdemux # ip address or hostname json's consumer
      - WS_PORT=8899 # port number of json's consumer
      - SKIP_BLOCK_EVENTS=false
      - SKIP_TABLE_DELTAS=false
      - SKIP_TRACES=false
      - BIN_HEADER=false
      - EXP_WS_PATH=/
      - EXP_WS_MAX_QEUEU=10000
      - IRREVERSIBLE_ONLY=false
      - WAIT_HOSTS= rxdemux:8899
      - WAIT_HOSTS_TIMEOUT=60
    depends_on:
      - rxdemux

  rxdemux:
    container_name: dreamstack_rxdemux
    image: dreamstack/rxdemux
    build:
      context: ./services/rxdemux
      dockerfile: Dockerfile
    volumes:
      - ./services/rxdemux:/opt/application  # mount demux service folder
      - /opt/application/node_modules # prevents host/container conflicts
    environment:
      CHRONICLE_CONSUMER_HOST: 0.0.0.0
      CHRONICLE_CONSUMER_PORT: 8899
      CHRONICLE_CONSUMER_ACK: 10
      CHRONICLE_CONSUMER_ASYNC: 'true'
      HASURA_ENDPOINT: http://hasura:8080/v1/graphql
      HASURA_ADMIN_SECRET: mysecretaccesskey
      WAIT_HOSTS: hasura:8080
      WAIT_HOSTS_TIMEOUT: 60
    depends_on:
      - hasura

  nginx:
    container_name: dreamstack_nginx
    image: jwilder/nginx-proxy:alpine
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./services/nginx/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf

volumes:
  # dreamstack_eosio:
  dreamstack_postgres_data:

networks:
  default:
    name: dreamstack

